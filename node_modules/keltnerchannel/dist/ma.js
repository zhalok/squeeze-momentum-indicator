'use strict';

/**
 * Calculate simple moving average
 *
 * @param {Array} data Data array
 * @param {Number} period Number of time periods
 *
 * @return {Array} Moving average
 */

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sma = sma;
exports.ema = ema;
function sma(data, period) {
    if (!Number.isInteger(period)) {
        throw new Error('Invalid Argument: period should be an Integer');
    }

    if (period <= 0) {
        throw new Error('Invalid Argument: period should be greater than 0');
    }

    if (data.length === 0) {
        return [];
    }

    if (data.length < period) {
        throw new Error('Invalid Argument: period is greater than data length');
    }

    var mas = [];
    var sum = 0;

    for (var i = 0; i < period; i++) {
        sum += data[i];
    }
    mas.push(sum / period);

    for (var _i = period; _i < data.length; _i++) {
        sum += data[_i] - data[_i - period];
        mas.push(sum / period);
    }

    return mas;
}

/**
 * Calculate exponential moving average
 *
 * @param {Array} data Data array
 * @param {Number} period Number of time periods
 *
 * @return {Array} Moving average
 */
function ema(data, period) {
    if (!Number.isInteger(period)) {
        throw new Error('Invalid Argument: period should be an Integer');
    }

    if (period <= 0) {
        throw new Error('Invalid Argument: period should be greater than 0');
    }

    if (data.length === 0) {
        return [];
    }

    if (data.length < period) {
        throw new Error('Invalid Argument: period is greater than data length');
    }

    var mas = [];
    var multiplier = 2 / (period + 1);

    var sum = 0;
    for (var i = 0; i < period; i++) {
        sum += data[i];
    }
    mas.push(sum / period);

    for (var _i2 = period; _i2 < data.length; _i2++) {
        var val = (data[_i2] - mas[_i2 - period]) * multiplier + mas[_i2 - period];
        mas.push(val);
    }

    return mas;
}