'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.boll = boll;

var _ma = require('./ma');

/**
 * Calculate bollinger band
 *
 * @param {Array} data Data Array
 * @param {Number} period Number of Periods
 * @param {Number} times N-th Standard Deviation
 * @param {Boolean} simple Use SMA if true or else EMA
 *
 * @return {Object} bollinger band data - {upper: [], mid: [], lower: []}
 */
function boll(data, period, times) {
    var simple = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

    if (!Number.isInteger(period)) {
        throw new Error('Invalid Argument: period should be an Integer');
    }

    if (period <= 0) {
        throw new Error('Invalid Argument: period should be greater than 0');
    }

    if (typeof times !== 'number') {
        throw new Error('Invalid Argument: multiplier should be a Number');
    }

    var m = simple ? _ma.sma : _ma.ema;
    var mid = m(data, period);
    var upper = [];
    var lower = [];

    for (var i = 0; i < mid.length; i++) {
        var d = 0;
        for (var j = i; j < i + period; j++) {
            d += Math.pow(mid[i] - data[j], 2);
        }
        d = Math.sqrt(d / period) * times;
        upper.push(mid[i] + d);
        lower.push(mid[i] - d);
    }

    return {
        upper: upper,
        mid: mid,
        lower: lower
    };
}